Hey, there I am very bad in using parentheses '(' and ')' . Help to check whether my code is valid or not. To help ease your work I ran minifier on my code.
Since it ran with no errors in minifier I assure you that I have all n/2 pairs of perfect parentheses.Now tell me the minimum possible moves in which I could
rearrange them to Good parentheses sequences.In one move, I can choose exactly one bracket and move it to any valid position in the code.It can be proved that 
the answer always exists under the given constraints.

Note:-
 "()()", "(())()", "(())" and "()" are Good parentheses sequences, but ")(", "()(" and ")))" are not.
 My code has n/2 opening and n/2 closing brackets.


Constraints
1≤t≤2000 - No of testcases followed by t testcases below
The first line of the test case contains one integer n (2≤n≤50) — the length of s. It is guaranteed that n is even.
 The second line of the test case containg the string s consisting of n/2 opening and n/2 closing brackets.

Sample input:
4
2
)(
4
()()
8
())()()(
10
)))((((())
Sample output:
1
0
1
3
Note:
In the first test case of the example, it is sufficient to move the first bracket to the end of the string.

In the third test case of the example, it is sufficient to move the last bracket to the beginning of the string.

In the fourth test case of the example, we can choose last three openning brackets, move them to the beginning of the string and obtain "((()))(())".